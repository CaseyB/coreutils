var searchIndex={};
searchIndex["basename"] = {"doc":"","i":[[5,"main","basename","",null,[[]]],[5,"basename","","Get `full_path` basename, removing the given `suffix`.",null,[[["str"]],["string"]]],[5,"strip_suffix","","Removes the given `suffix` from the `name`.",null,[[["str"]],["string"]]]],"p":[]};
searchIndex["cat"] = {"doc":"","i":[[3,"CatFlags","cat","",null,null],[12,"number","","",0,null],[12,"number_nonblank","","",0,null],[12,"show_ends","","",0,null],[12,"squeeze_blank","","",0,null],[5,"main","","",null,[[]]],[5,"print_line","","",null,[[["usize"],["string"],["catflags"],["bool"]]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["catflags"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"CatFlags"]]};
searchIndex["chroot"] = {"doc":"","i":[[5,"main","chroot","",null,[[]]],[5,"set_groups_from_list","","",null,[[["str"]],[["result",["grerror"]],["grerror"]]]],[5,"set_user_from_userspec","","",null,[[["str"]],[["result",["grerror"]],["grerror"]]]]],"p":[]};
searchIndex["clear"] = {"doc":"","i":[[5,"main","clear","",null,[[]]]],"p":[]};
searchIndex["coreutils_core"] = {"doc":"","i":[[3,"BStr","coreutils_core","A wrapper for `&[u8]` that provides convenient string…",null,null],[3,"BString","","A wrapper for `Vec<u8>` that provides convenient string…",null,null],[8,"ByteSlice","","A trait that extends `&[u8]` with string oriented methods.",null,null],[11,"as_bstr","","Return this byte slice as a `&BStr`.",0,[[["self"]],["bstr"]]],[11,"as_bstr_mut","","Return this byte slice as a `&mut BStr`.",0,[[["self"]],["bstr"]]],[11,"from_os_str","","Create an immutable byte string from an OS string slice.",0,[[["osstr"]],["option"]]],[11,"from_path","","Create an immutable byte string from a file path.",0,[[["path"]],["option"]]],[11,"to_str","","Safely convert this byte string into a `&str` if it's…",0,[[["self"]],[["str"],["result",["str","utf8error"]],["utf8error"]]]],[11,"to_str_unchecked","","Unsafely convert this byte string into a `&str`, without…",0,[[["self"]],["str"]]],[11,"to_str_lossy","","Convert this byte string to a valid UTF-8 string by…",0,[[["self"]],[["str"],["cow",["str"]]]]],[11,"to_str_lossy_into","","Copy the contents of this byte string into the given owned…",0,[[["self"],["string"]]]],[11,"to_os_str","","Create an OS string slice from this byte string.",0,[[["self"]],[["utf8error"],["osstr"],["result",["osstr","utf8error"]]]]],[11,"to_os_str_lossy","","Lossily create an OS string slice from this byte string.",0,[[["self"]],[["osstr"],["cow",["osstr"]]]]],[11,"to_path","","Create a path slice from this byte string.",0,[[["self"]],[["path"],["utf8error"],["result",["path","utf8error"]]]]],[11,"to_path_lossy","","Lossily create a path slice from this byte string.",0,[[["self"]],[["path"],["cow",["path"]]]]],[11,"repeatn","","Create a new byte string by repeating this byte string `n`…",0,[[["self"],["usize"]],[["vec",["u8"]],["u8"]]]],[11,"contains_str","","Returns true if and only if this byte string contains the…",0,[[["self"],["b"]],["bool"]]],[11,"starts_with_str","","Returns true if and only if this byte string has the given…",0,[[["self"],["b"]],["bool"]]],[11,"ends_with_str","","Returns true if and only if this byte string has the given…",0,[[["self"],["b"]],["bool"]]],[11,"find","","Returns the index of the first occurrence of the given…",0,[[["self"],["b"]],[["option",["usize"]],["usize"]]]],[11,"rfind","","Returns the index of the last occurrence of the given…",0,[[["self"],["b"]],[["option",["usize"]],["usize"]]]],[11,"find_iter","","Returns an iterator of the non-overlapping occurrences of…",0,[[["b"],["self"]],["find"]]],[11,"rfind_iter","","Returns an iterator of the non-overlapping occurrences of…",0,[[["b"],["self"]],["findreverse"]]],[11,"find_byte","","Returns the index of the first occurrence of the given…",0,[[["self"],["u8"]],[["option",["usize"]],["usize"]]]],[11,"rfind_byte","","Returns the index of the last occurrence of the given…",0,[[["self"],["u8"]],[["option",["usize"]],["usize"]]]],[11,"find_char","","Returns the index of the first occurrence of the given…",0,[[["self"],["char"]],[["option",["usize"]],["usize"]]]],[11,"rfind_char","","Returns the index of the last occurrence of the given…",0,[[["self"],["char"]],[["option",["usize"]],["usize"]]]],[11,"find_byteset","","Returns the index of the first occurrence of any of the…",0,[[["self"],["b"]],[["option",["usize"]],["usize"]]]],[11,"find_not_byteset","","Returns the index of the first occurrence of a byte that…",0,[[["self"],["b"]],[["option",["usize"]],["usize"]]]],[11,"rfind_byteset","","Returns the index of the last occurrence of any of the…",0,[[["self"],["b"]],[["option",["usize"]],["usize"]]]],[11,"rfind_not_byteset","","Returns the index of the last occurrence of a byte that is…",0,[[["self"],["b"]],[["option",["usize"]],["usize"]]]],[11,"fields","","Returns an iterator over the fields in a byte string,…",0,[[["self"]],["fields"]]],[11,"fields_with","","Returns an iterator over the fields in a byte string,…",0,[[["self"],["f"]],["fieldswith"]]],[11,"split_str","","Returns an iterator over substrings of this byte string,…",0,[[["b"],["self"]],["split"]]],[11,"rsplit_str","","Returns an iterator over substrings of this byte string,…",0,[[["b"],["self"]],["splitreverse"]]],[11,"splitn_str","","Returns an iterator of at most `limit` substrings of this…",0,[[["b"],["self"],["usize"]],["splitn"]]],[11,"rsplitn_str","","Returns an iterator of at most `limit` substrings of this…",0,[[["b"],["self"],["usize"]],["splitnreverse"]]],[11,"replace","","Replace all matches of the given needle with the given…",0,[[["r"],["self"],["n"]],[["vec",["u8"]],["u8"]]]],[11,"replacen","","Replace up to `limit` matches of the given needle with the…",0,[[["usize"],["n"],["self"],["r"]],[["vec",["u8"]],["u8"]]]],[11,"replace_into","","Replace all matches of the given needle with the given…",0,[[["vec"],["n"],["self"],["r"]]]],[11,"replacen_into","","Replace up to `limit` matches of the given needle with the…",0,[[["vec"],["usize"],["n"],["self"],["r"]]]],[11,"bytes","","Returns an iterator over the bytes in this byte string.",0,[[["self"]],["bytes"]]],[11,"chars","","Returns an iterator over the Unicode scalar values in this…",0,[[["self"]],["chars"]]],[11,"char_indices","","Returns an iterator over the Unicode scalar values in this…",0,[[["self"]],["charindices"]]],[11,"utf8_chunks","","Iterate over chunks of valid UTF-8.",0,[[["self"]],["utf8chunks"]]],[11,"graphemes","","Returns an iterator over the grapheme clusters in this…",0,[[["self"]],["graphemes"]]],[11,"grapheme_indices","","Returns an iterator over the grapheme clusters in this…",0,[[["self"]],["graphemeindices"]]],[11,"words","","Returns an iterator over the words in this byte string. If…",0,[[["self"]],["words"]]],[11,"word_indices","","Returns an iterator over the words in this byte string…",0,[[["self"]],["wordindices"]]],[11,"words_with_breaks","","Returns an iterator over the words in this byte string,…",0,[[["self"]],["wordswithbreaks"]]],[11,"words_with_break_indices","","Returns an iterator over the words and their byte offsets…",0,[[["self"]],["wordswithbreakindices"]]],[11,"sentences","","Returns an iterator over the sentences in this byte string.",0,[[["self"]],["sentences"]]],[11,"sentence_indices","","Returns an iterator over the sentences in this byte string…",0,[[["self"]],["sentenceindices"]]],[11,"lines","","An iterator over all lines in a byte string, without their…",0,[[["self"]],["lines"]]],[11,"lines_with_terminator","","An iterator over all lines in a byte string, including…",0,[[["self"]],["lineswithterminator"]]],[11,"trim","","Return a byte string slice with leading and trailing…",0,[[["self"]]]],[11,"trim_start","","Return a byte string slice with leading whitespace removed.",0,[[["self"]]]],[11,"trim_end","","Return a byte string slice with trailing whitespace removed.",0,[[["self"]]]],[11,"trim_with","","Return a byte string slice with leading and trailing…",0,[[["self"],["f"]]]],[11,"trim_start_with","","Return a byte string slice with leading characters…",0,[[["self"],["f"]]]],[11,"trim_end_with","","Return a byte string slice with trailing characters…",0,[[["self"],["f"]]]],[11,"to_lowercase","","Returns a new `Vec<u8>` containing the lowercase…",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_lowercase_into","","Writes the lowercase equivalent of this byte string into…",0,[[["self"],["vec"]]]],[11,"to_ascii_lowercase","","Returns a new `Vec<u8>` containing the ASCII lowercase…",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"make_ascii_lowercase","","Convert this byte string to its lowercase ASCII equivalent…",0,[[["self"]]]],[11,"to_uppercase","","Returns a new `Vec<u8>` containing the uppercase…",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"to_uppercase_into","","Writes the uppercase equivalent of this byte string into…",0,[[["self"],["vec"]]]],[11,"to_ascii_uppercase","","Returns a new `Vec<u8>` containing the ASCII uppercase…",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"make_ascii_uppercase","","Convert this byte string to its uppercase ASCII equivalent…",0,[[["self"]]]],[11,"reverse_bytes","","Reverse the bytes in this string, in place.",0,[[["self"]]]],[11,"reverse_chars","","Reverse the codepoints in this string, in place.",0,[[["self"]]]],[11,"reverse_graphemes","","Reverse the graphemes in this string, in place.",0,[[["self"]]]],[11,"is_ascii","","Returns true if and only if every byte in this byte string…",0,[[["self"]],["bool"]]],[11,"is_utf8","","Returns true if and only if the entire byte string is…",0,[[["self"]],["bool"]]],[11,"last_byte","","Returns the last byte in this byte string, if it's…",0,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"find_non_ascii_byte","","Returns the index of the first non-ASCII byte in this byte…",0,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"copy_within_str","","Copies elements from one part of the slice to another part…",0,[[["self"],["usize"],["r"]]]],[8,"ByteVec","","A trait that extends `Vec<u8>` with string oriented methods.",null,null],[11,"from_slice","","Create a new owned byte string from the given byte slice.",1,[[["b"]],[["vec",["u8"]],["u8"]]]],[11,"from_os_string","","Create a new byte string from an owned OS string.",1,[[["osstring"]],[["result",["vec","osstring"]],["vec",["u8"]],["osstring"]]]],[11,"from_os_str_lossy","","Lossily create a new byte string from an OS string slice.",1,[[["osstr"]],["cow"]]],[11,"from_path_buf","","Create a new byte string from an owned file path.",1,[[["pathbuf"]],[["vec",["u8"]],["pathbuf"],["result",["vec","pathbuf"]]]]],[11,"from_path_lossy","","Lossily create a new byte string from a file path.",1,[[["path"]],["cow"]]],[11,"push_byte","","Appends the given byte to the end of this byte string.",1,[[["self"],["u8"]]]],[11,"push_char","","Appends the given `char` to the end of this byte string.",1,[[["self"],["char"]]]],[11,"push_str","","Appends the given slice to the end of this byte string.…",1,[[["self"],["b"]]]],[11,"into_string","","Converts a `Vec<u8>` into a `String` if and only if this…",1,[[],[["result",["string","fromutf8error"]],["string"],["fromutf8error"]]]],[11,"into_string_lossy","","Lossily converts a `Vec<u8>` into a `String`. If this byte…",1,[[],["string"]]],[11,"into_string_unchecked","","Unsafely convert this byte string into a `String`, without…",1,[[],["string"]]],[11,"into_os_string","","Converts this byte string into an OS string, in place.",1,[[],[["vec",["u8"]],["osstring"],["result",["osstring","vec"]]]]],[11,"into_os_string_lossy","","Lossily converts this byte string into an OS string, in…",1,[[],["osstring"]]],[11,"into_path_buf","","Converts this byte string into an owned file path, in place.",1,[[],[["result",["pathbuf","vec"]],["pathbuf"],["vec",["u8"]]]]],[11,"into_path_buf_lossy","","Lossily converts this byte string into an owned file path,…",1,[[],["pathbuf"]]],[11,"pop_byte","","Removes the last byte from this `Vec<u8>` and returns it.",1,[[["self"]],[["option",["u8"]],["u8"]]]],[11,"pop_char","","Removes the last codepoint from this `Vec<u8>` and returns…",1,[[["self"]],[["option",["char"]],["char"]]]],[11,"remove_char","","Removes a `char` from this `Vec<u8>` at the given byte…",1,[[["self"],["usize"]],["char"]]],[11,"insert_char","","Inserts the given codepoint into this `Vec<u8>` at a…",1,[[["self"],["usize"],["char"]]]],[11,"insert_str","","Inserts the given byte string into this byte string at a…",1,[[["self"],["usize"],["b"]]]],[11,"replace_range","","Removes the specified range in this byte string and…",1,[[["self"],["b"],["r"]]]],[11,"drain_bytes","","Creates a draining iterator that removes the specified…",1,[[["self"],["r"]],["drainbytes"]]],[5,"B","","A short-hand constructor for building a `&[u8]`.",null,[[["b"]]]],[0,"backup","","The Backup module handles creating backups using the…",null,null],[4,"BackupMode","coreutils_core::backup","Convenience Enum to represent the different backup modes.…",null,null],[13,"None","","No backups will be made.",2,null],[13,"Numbered","","Backups will be made of the form `<filename>~<X>~` where…",2,null],[13,"Existing","","The backup method will be consistant with what already…",2,null],[13,"Simple","","Backups will be made of the form `<filename><suffix>`…",2,null],[5,"create_numbered_backup","","Creates a numbered backup. Does so by taking the input…",null,[[["path"]],[["error"],["result",["pathbuf","error"]],["pathbuf"]]]],[5,"create_existing_backup","","Creates a backup in-keeping with previous backups. Pokes…",null,[[["str"],["path"]],[["error"],["result",["pathbuf","error"]],["pathbuf"]]]],[5,"create_simple_backup","","Creates a simple backup. Creates a backup of the form…",null,[[["str"],["path"]],[["error"],["result",["pathbuf","error"]],["pathbuf"]]]],[11,"from_string","","Creates an instance of [`BackupMode`] from a string slice.…",2,[[],["self"]]],[0,"consts","coreutils_core","CFG constants",null,null],[17,"HOST_OS","coreutils_core::consts","",null,null],[17,"MACHINE_ARCH","","",null,null],[0,"env","coreutils_core","Module for environments abstractions.",null,null],[4,"Error","coreutils_core::env","Possible errors when calling this module functions.",null,null],[13,"Var","","",3,null],[13,"Io","","",3,null],[5,"current_dir_logical","","Get the logical path of the current directory.",null,[[],[["result",["pathbuf","error"]],["error"],["pathbuf"]]]],[0,"input","coreutils_core","The Input module handles getting user input from the…",null,null],[3,"Input","coreutils_core::input","The Input struct handles issuing messages and getting…",null,null],[11,"new","","Initializes a new Input builder.",4,[[],["self"]]],[11,"with_msg","","Specifies the message to display to the user.",4,[[["self"],["str"]],["self"]]],[11,"with_err_msg","","Specifies the error message to display to the user. NOTE:…",4,[[["self"],["str"]],["self"]]],[11,"get","","Gets the input value the user entered as a [`String`].",4,[[["self"]],[["option",["string"]],["string"]]]],[11,"is_affirmative","","Verifies whether the user input is considered an…",4,[[["self"]],["bool"]]],[0,"mkfifo","coreutils_core","Helper functions to deal with FIFO special file.",null,null],[5,"mkfifo","coreutils_core::mkfifo","Creates FIFO special file with name `filepath` with `mode`…",null,[[["str"],["u32"]],["result"]]],[0,"mktemp","coreutils_core","Module with wrappers for libc mkstemp(3), mkdtemp(3).",null,null],[3,"Mktemp","coreutils_core::mktemp","A struct that represents a mktemp(3) result. This includes…",null,null],[12,"file","","",5,null],[12,"path","","",5,null],[5,"mkstemp","","Creates a temporary file based on the given `template`.",null,[[["str"]],[["mktemp"],["result",["mktemp"]]]]],[5,"mkdtemp","","Creates a temporary directory based on the given `template`.",null,[[["str"]],[["result",["string"]],["string"]]]],[0,"os","coreutils_core","Module for OS processes and types abstractions.",null,null],[5,"get_effective_gid","coreutils_core::os","Get the current running process user effective group id.",null,[[],["uid"]]],[5,"get_real_gid","","Get the current running process user real group id.",null,[[],["uid"]]],[5,"get_effective_uid","","Get the current running process user effective user id.",null,[[],["uid"]]],[5,"get_real_uid","","Get the current running process user real user id.",null,[[],["uid"]]],[0,"group","","Module to deal more easily with UNIX groups.",null,null],[3,"Group","coreutils_core::os::group","This struct holds information about a group of…",null,null],[3,"Groups","","A collection of [`Group`].",null,null],[4,"Error","","Enum that holds possible errors while creating [`Group`]…",null,null],[13,"GetGroupFailed","","Happens when [`getgrgid_r`], [`getgrnam_r`] or…",6,null],[13,"NameCheckFailed","","Happens when the pointer to the `.gr_name` is NULL.",6,null],[13,"PasswdCheckFailed","","Happens when the pointer to the `.gr_passwd` is NULL.",6,null],[13,"GroupNotFound","","Happens when the pointer of [`group`] primitive is NULL.",6,null],[13,"Io","","Happens when calling [`getgroups`] or [`getgrouplist`] C…",6,null],[13,"Passwd","","Happens when creating a [`Passwd`] fails.",6,null],[6,"Result","","",null,null],[6,"Members","","A iterator of group members.",null,null],[11,"new","","Creates a new [`Group`] getting the user group as default.",7,[[],["result"]]],[11,"from_gid","","Creates a [`Group`] using a `id` to get all attributes.",7,[[["gid"]],["result"]]],[11,"from_name","","Creates a [`Group`] using a `name` to get all attributes.",7,[[["str"]],["result"]]],[11,"name","","Returns the `Group` name.",7,[[["self"]],["bstr"]]],[11,"id","","Returns the `Group` id.",7,[[["self"]],["gid"]]],[11,"passwd","","Returns the `Group` encrypted password.",7,[[["self"]],["bstr"]]],[11,"mem","","Returns the `Group` list of members.",7,[[["self"]],["members"]]],[11,"new","","Creates a empty new [`Groups`].",8,[[],["self"]]],[11,"caller","","Get all the process caller groups.",8,[[],["result"]]],[11,"from_username","","Get all groups that `username` belongs.",8,[[["str"]],["result"]]],[11,"from_group_list","","Get groups from a list of group names.",8,[[],["result"]]],[11,"push","","Insert a [`Group`] on [`Groups`].",8,[[["self"],["group"]]]],[11,"is_empty","","Return `true` if [`Groups`] contains 0 elements.",8,[[["self"]],["bool"]]],[11,"into_vec","","Transform [`Groups`] to a Vector of [`Group`].",8,[[],[["vec",["group"]],["group"]]]],[11,"iter","","Creates a iterator over it's entries.",8,[[["self"]],[["iter",["group"]],["group"]]]],[0,"login_name","coreutils_core::os","Module to abstract libc function that get user login name.",null,null],[5,"user_login_name","coreutils_core::os::login_name","Returns the the name of the user logged in on the…",null,[[],[["bstring"],["option",["bstring"]]]]],[0,"passwd","coreutils_core::os","Module to deal more easily with UNIX passwd.",null,null],[3,"Passwd","coreutils_core::os::passwd","This struct holds the information of a user in…",null,null],[4,"Error","","This struct holds information about a passwd of…",null,null],[13,"GetPasswdFailed","","Happens when [`getpwuid_r`] or [`getpwnam_r`] fails.",9,null],[13,"NameCheckFailed","","Happens when the pointer to the `.pw_name` is NULL.",9,null],[13,"PasswdCheckFailed","","Happens when the pointer to the `.pw_passwd` is NULL.",9,null],[13,"GecosCheckFailed","","Happens when the pointer to the `.pw_gecos` is NULL.",9,null],[13,"DirCheckFailed","","Happens when the pointer to the `.pw_dir` is NULL.",9,null],[13,"ShellCheckFailed","","Happens when the pointer to the `.pw_shell` is NULL.",9,null],[13,"ClassCheckFailed","","Happens when the pointer to the `.pw_class` is NULL.",9,null],[13,"AgeCheckFailed","","Happens when the pointer to the `.pw_age` is NULL.",9,null],[13,"CommentCheckFailed","","Happens when the pointer to the `.pw_comment` is NULL.",9,null],[13,"PasswdNotFound","","Happens when the [`passwd`] is not found.",9,null],[13,"Io","","Happens when there is a IO error",9,null],[13,"Group","","Happens when something happens when finding what [`Group`]…",9,null],[6,"Result","","",null,null],[11,"effective","","Creates a new [`Passwd`] getting the current process user…",10,[[],["result"]]],[11,"real","","Creates a new [`Passwd`] getting the current process user…",10,[[],["result"]]],[11,"from_uid","","Creates a new [`Passwd`] using a `id` to get all attributes.",10,[[["uid"]],["result"]]],[11,"from_name","","Creates a new [`Passwd`] using a `name` to get all…",10,[[["str"]],["result"]]],[11,"name","","Returns the [`Passwd`] (user) login name.",10,[[["self"]],["bstr"]]],[11,"passwd","","Returns the [`Passwd`] (user) encrypted password.",10,[[["self"]],["bstr"]]],[11,"uid","","Returns the [`Passwd`] (user) user ID.",10,[[["self"]],["uid"]]],[11,"gid","","Returns the [`Passwd`] (user) primary group ID.",10,[[["self"]],["gid"]]],[11,"gecos","","Returns the [`Passwd`] (user) full name.",10,[[["self"]],["bstr"]]],[11,"dir","","Returns the [`Passwd`] (user) directory.",10,[[["self"]],["bstr"]]],[11,"shell","","Returns the [`Passwd`] (user) shell.",10,[[["self"]],["bstr"]]],[11,"belongs_to","","Returns [`Groups`] that the [`Passwd`] (user) belongs to.",10,[[["self"]],[["result",["groups"]],["groups"]]]],[0,"process","coreutils_core::os","Module with abstractions to safely deal with processes.",null,null],[5,"change_root","coreutils_core::os::process","Change the root of the running process to `newroot`.",null,[[["str"]],["result"]]],[5,"set_user","","Set the `user` for the current process.",null,[[["str"]],[["result",["pwerror"]],["pwerror"]]]],[5,"set_groups","","Set the `groups` for the current process.",null,[[],[["result",["grerror"]],["grerror"]]]],[5,"set_group","","Set the `group` for the current process.",null,[[["str"]],[["result",["grerror"]],["grerror"]]]],[0,"priority","","Module for safe API for getting and setting process…",null,null],[17,"PRIO_PROCESS","coreutils_core::os::process::priority","",null,null],[5,"get_priority","","Get the highest priority (lowest numerical value) enjoyed…",null,[[["c_uint"],["id_t"]],[["c_int"],["result",["c_int"]]]]],[5,"set_priority","","Set the priority of a specified process.",null,[[["c_uint"],["c_int"],["id_t"]],["result"]]],[0,"time","coreutils_core::os","Module for time related abstractions more close to the OS.",null,null],[5,"set_time_of_day","coreutils_core::os::time","Set the system time as `timeval`",null,[[["timeval"]],["result"]]],[5,"local_time","","Get the time structure with local time offset.",null,[[["i64"]],[["result",["tm"]],["tm"]]]],[5,"utc_offset","","",null,[[["tm"]],["i64"]]],[5,"system_utc_offset","","",null,[[],[["i64"],["result",["i64"]]]]],[0,"tty","coreutils_core::os","Module for TTY abstractions.",null,null],[3,"TTYName","coreutils_core::os::tty","A struct that holds the name of a TTY with a [`Display`]…",null,null],[4,"Error","","Possible errors while trying to get a TTY name",null,null],[13,"NotTTY","","Not a TTY error",11,null],[13,"LibcCall","","Any other error",11,null],[5,"is_tty","","Check if the given `file_descriptor` is a TTY.",null,[[],["bool"]]],[8,"IsTTY","","Convenience trait to use [`is_tty`] function as method",null,null],[10,"is_tty","","Check if caller is a TTY.",12,[[["self"]],["bool"]]],[11,"new","","Create a [`TTYName`] from a `file_descriptor`",13,[[],[["result",["error"]],["error"]]]],[11,"as_bstr","","Extracts a bstring slice containing the entire [`BString`].",13,[[["self"]],["bstr"]]],[11,"to_bstring","","Return a clone of the tty name.",13,[[["self"]],["bstring"]]],[0,"utsname","coreutils_core::os","Module for system information.",null,null],[3,"UtsName","coreutils_core::os::utsname","A struct that holds several system informations, like the…",null,null],[11,"new","","Generates a new [`UtsName`] of the system.",14,[[],[["result",["error"]],["error"]]]],[11,"system_name","","Get system name.",14,[[["self"]],["bstr"]]],[11,"node_name","","Get host name of the machine.",14,[[["self"]],["bstr"]]],[11,"release","","Get the release level of the operating system.",14,[[["self"]],["bstr"]]],[11,"version","","Get the version level of this release of the operating…",14,[[["self"]],["bstr"]]],[11,"machine","","Get the type of the current hardware platform.",14,[[["self"]],["bstr"]]],[11,"domain_name","","Get the NIS or YP domain name.",14,[[["self"]],["bstr"]]],[0,"load","coreutils_core::os","Module related to system load.",null,null],[5,"load_average","coreutils_core::os::load","Returns 3 load average from the system.",null,[[],["result"]]],[0,"utmpx","coreutils_core::os","Extended account database module.",null,null],[3,"Utmpx","coreutils_core::os::utmpx","A struct that represents a user account, where user can be…",null,null],[3,"UtmpxSet","","A collection of Utmpx entries.",null,null],[4,"Error","","Error type for [`UtmpxKind`] conversion.",null,null],[13,"OsNoKind","","When the OS has not this [`UtmpxKind`] and a number…",15,null],[13,"OsNoNumber","","When the OS has no [`UtmpxKind`] related to this number.",15,null],[4,"UtmpxKind","","Possible types of a [`Utmpx`] instance.",null,null],[13,"Accounting","","Not sure yet. (Linux and MacOS exclusive)",16,null],[13,"BootTime","","Time of a system boot.",16,null],[13,"DeadProcess","","A session leader exited.",16,null],[13,"Empty","","No valid user accounting information.",16,null],[13,"InitProcess","","A process spawned by init(8).",16,null],[13,"LoginProcess","","The session leader of a logged-in user.",16,null],[13,"NewTime","","Time after system clock change.",16,null],[13,"OldTime","","Time before system clock change.",16,null],[13,"RunLevel","","Run level. Provided for compatibility, not used on NetBSD.",16,null],[13,"Signature","","Not sure yet. (MacOS exclusive)",16,null],[13,"ShutdownProcess","","The session leader of a time of system shutdown.",16,null],[13,"UserProcess","","",16,null],[13,"DownTime","","",16,null],[11,"from_c_utmpx","","Creates a new [`Utmpx`] entry from the `C` version of the…",17,[[["utmpx"]],["self"]]],[11,"user","","Get user name.",17,[[["self"]],["bstr"]]],[11,"host","","Get host name.",17,[[["self"]],["bstr"]]],[11,"process_id","","Get the process ID.",17,[[["self"]],["pid"]]],[11,"id","","Get the record ID.",17,[[["self"]],["bstr"]]],[11,"device_name","","Get the device name of the entry (usually a tty or console).",17,[[["self"]],["bstr"]]],[11,"entry_type","","Get the type kind if the entry.",17,[[["self"]],["utmpxkind"]]],[11,"timeval","","Get the time where the entry was created. (often login time)",17,[[["self"]],["timeval"]]],[11,"login_time","","Get the time where the entry was created (often login…",17,[[["self"]],["datetime"]]],[11,"session","","Get the session ID of the entry.",17,[[["self"]],["c_int"]]],[11,"v6_addr","","Get v6 address of the entry.",17,[[["self"]]]],[11,"exit_status","","Get exit status of the entry.",17,[[["self"]],["exitstatus"]]],[11,"from_file","","Creates a new collection over a utmpx entry binary file.",18,[[],["result"]]],[11,"system","","Creates a new collection geting all entries from the…",18,[[],["self"]]],[11,"is_empty","","Returns `true` if collection nas no elements.",18,[[["self"]],["bool"]]],[11,"iter","","Creates a iterator over it's entries.",18,[[["self"]],[["iter",["utmpx"]],["utmpx"]]]],[11,"len","","Size of the collection.",18,[[["self"]],["usize"]]],[6,"Tm","coreutils_core::os","",null,null],[6,"TimeVal","","Time stamp type used on system structures.",null,null],[6,"Gid","","Group ID type.",null,null],[6,"Uid","","User ID type.",null,null],[6,"Pid","","Process ID Type.",null,null],[6,"Time","","Passwd time type.",null,null],[6,"Fields","","Passwd field type.",null,null],[6,"Susec","","Field for [`TimeVal`] in microseconds.",null,null],[11,"to_owned","coreutils_core","",19,[[["self"]],["t"]]],[11,"clone_into","","",19,[[["self"],["t"]]]],[11,"to_string","","",19,[[["self"]],["string"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,[[["self"],["t"]]]],[11,"to_string","","",20,[[["self"]],["string"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","coreutils_core::backup","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","coreutils_core::env","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_string","","",3,[[["self"]],["string"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","coreutils_core::input","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","coreutils_core::mktemp","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","coreutils_core::os::group","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"into_iter","","",8,[[],["i"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_string","","",6,[[["self"]],["string"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","coreutils_core::os::passwd","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"to_string","","",10,[[["self"]],["string"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_string","","",9,[[["self"]],["string"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","coreutils_core::os::tty","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"to_string","","",13,[[["self"]],["string"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"to_string","","",11,[[["self"]],["string"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","coreutils_core::os::utsname","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,[[["self"],["t"]]]],[11,"to_string","","",14,[[["self"]],["string"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","coreutils_core::os::utmpx","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_string","","",15,[[["self"]],["string"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"deref_mut","coreutils_core","",20,[[["self"]],["vec"]]],[11,"deref_mut","","",19,[[["self"]]]],[11,"clone","","",20,[[["self"]],["bstring"]]],[11,"from_iter","","",20,[[["t"]],["bstring"]]],[11,"from_iter","","",20,[[["t"]],["bstring"]]],[11,"from_iter","","",20,[[["t"]],["bstring"]]],[11,"from_iter","","",20,[[["t"]],["bstring"]]],[11,"from_iter","","",20,[[["t"]],["bstring"]]],[11,"from_iter","","",20,[[["t"]],["bstring"]]],[11,"default","","",20,[[],["bstring"]]],[11,"fmt","","",20,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",19,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",19,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",20,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"partial_cmp","","",19,[[["self"],["vec"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["bstr"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["string"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["self"],["vec"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["self"],["bstring"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["string"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["self"],["bstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",19,[[["self"],["bstr"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["str"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",20,[[["self"],["bstring"]],[["option",["ordering"]],["ordering"]]]],[11,"borrow","","",20,[[["self"]],["bstr"]]],[11,"as_ref","","",20,[[["self"]]]],[11,"as_ref","","",19,[[["self"]]]],[11,"as_ref","","",20,[[["self"]],["bstr"]]],[11,"deref","","",20,[[["self"]],["vec"]]],[11,"deref","","",19,[[["self"]]]],[11,"index_mut","","",19,[[["range",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index_mut","","",19,[[["rangeto",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index_mut","","",19,[[["rangeinclusive",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index_mut","","",19,[[["self"],["usize"],["rangetoinclusive",["usize"]]],["bstr"]]],[11,"index_mut","","",19,[[["rangefrom",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index_mut","","",19,[[["self"],["rangefull"]],["bstr"]]],[11,"index_mut","","",19,[[["self"],["usize"]],["u8"]]],[11,"eq","","",20,[[["self"]],["bool"]]],[11,"eq","","",19,[[["str"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"],["bstring"]],["bool"]]],[11,"eq","","",20,[[["bstr"],["self"]],["bool"]]],[11,"eq","","",19,[[["str"],["self"]],["bool"]]],[11,"eq","","",19,[[["self"]],["bool"]]],[11,"eq","","",19,[[["self"],["vec"]],["bool"]]],[11,"eq","","",20,[[["self"],["vec"]],["bool"]]],[11,"eq","","",20,[[["str"],["self"]],["bool"]]],[11,"eq","","",20,[[["str"],["self"]],["bool"]]],[11,"eq","","",20,[[["self"],["bstr"]],["bool"]]],[11,"eq","","",20,[[["string"],["self"]],["bool"]]],[11,"eq","","",19,[[["self"]],["bool"]]],[11,"eq","","",19,[[["self"],["bstring"]],["bool"]]],[11,"eq","","",19,[[["self"],["bstr"]],["bool"]]],[11,"eq","","",20,[[["self"]],["bool"]]],[11,"eq","","",19,[[["string"],["self"]],["bool"]]],[11,"cmp","","",20,[[["self"],["bstring"]],["ordering"]]],[11,"cmp","","",19,[[["self"],["bstr"]],["ordering"]]],[11,"as_mut","","",20,[[["self"]],["bstr"]]],[11,"as_mut","","",19,[[["self"]]]],[11,"as_mut","","",20,[[["self"]]]],[11,"to_owned","","",19,[[["self"]],["bstring"]]],[11,"hash","","",20,[[["self"],["__h"]]]],[11,"hash","","",19,[[["self"],["__h"]]]],[11,"from","","",20,[[["string"]],["bstring"]]],[11,"from","","",20,[[],["bstring"]]],[11,"from","","",20,[[["vec",["u8"]],["u8"]],["bstring"]]],[11,"from","","",20,[[["str"]],["bstring"]]],[11,"from","","",20,[[["bstr"]],["bstring"]]],[11,"index","","",19,[[["self"],["usize"]],["u8"]]],[11,"index","","",19,[[["rangeinclusive",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index","","",19,[[["rangeto",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index","","",19,[[["rangefull"],["self"]],["bstr"]]],[11,"index","","",19,[[["rangetoinclusive",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index","","",19,[[["rangefrom",["usize"]],["self"],["usize"]],["bstr"]]],[11,"index","","",19,[[["range",["usize"]],["self"],["usize"]],["bstr"]]],[11,"from","coreutils_core::backup","Creates an instance of [`BackupMode`] from a string slice.…",2,[[["str"]],["self"]]],[11,"from","coreutils_core::env","",3,[[["varerror"]],["self"]]],[11,"from","","",3,[[["ioerror"]],["self"]]],[11,"from","coreutils_core::os::group","",6,[[["ioerror"]],["self"]]],[11,"from","","",6,[[["pwerror"]],["self"]]],[11,"from","coreutils_core::os::passwd","",9,[[["grerror"]],["error"]]],[11,"from","","",9,[[["ioerror"]],["error"]]],[11,"from","coreutils_core::os::utmpx","Converts [`utmpx`] to [`Utmpx`].",17,[[["utmpx"]],["self"]]],[11,"into_iter","coreutils_core::os::group","",8,[[]]],[11,"into_iter","coreutils_core::os::utmpx","",18,[[]]],[11,"clone","coreutils_core::backup","",2,[[["self"]],["backupmode"]]],[11,"clone","coreutils_core::input","",4,[[["self"]],["input"]]],[11,"clone","coreutils_core::os::group","",7,[[["self"]],["group"]]],[11,"clone","","",8,[[["self"]],["groups"]]],[11,"clone","coreutils_core::os::passwd","",10,[[["self"]],["passwd"]]],[11,"clone","coreutils_core::os::tty","",11,[[["self"]],["error"]]],[11,"clone","","",13,[[["self"]],["ttyname"]]],[11,"clone","coreutils_core::os::utsname","",14,[[["self"]],["utsname"]]],[11,"clone","coreutils_core::os::utmpx","",16,[[["self"]],["utmpxkind"]]],[11,"clone","","",17,[[["self"]],["utmpx"]]],[11,"default","coreutils_core::input","",4,[[],["input"]]],[11,"default","coreutils_core::os::group","",8,[[],["groups"]]],[11,"cmp","","",7,[[["group"],["self"]],["ordering"]]],[11,"cmp","coreutils_core::os::passwd","",10,[[["self"],["passwd"]],["ordering"]]],[11,"cmp","coreutils_core::os::tty","",11,[[["error"],["self"]],["ordering"]]],[11,"cmp","","",13,[[["self"],["ttyname"]],["ordering"]]],[11,"cmp","coreutils_core::os::utsname","",14,[[["self"],["utsname"]],["ordering"]]],[11,"cmp","coreutils_core::os::utmpx","",15,[[["error"],["self"]],["ordering"]]],[11,"cmp","","",16,[[["utmpxkind"],["self"]],["ordering"]]],[11,"eq","coreutils_core::backup","",2,[[["self"],["backupmode"]],["bool"]]],[11,"eq","coreutils_core::os::group","",7,[[["group"],["self"]],["bool"]]],[11,"ne","","",7,[[["group"],["self"]],["bool"]]],[11,"eq","coreutils_core::os::passwd","",10,[[["self"],["passwd"]],["bool"]]],[11,"ne","","",10,[[["self"],["passwd"]],["bool"]]],[11,"eq","coreutils_core::os::tty","",11,[[["error"],["self"]],["bool"]]],[11,"ne","","",11,[[["error"],["self"]],["bool"]]],[11,"eq","","",13,[[["self"],["ttyname"]],["bool"]]],[11,"ne","","",13,[[["self"],["ttyname"]],["bool"]]],[11,"eq","coreutils_core::os::utsname","",14,[[["self"],["utsname"]],["bool"]]],[11,"ne","","",14,[[["self"],["utsname"]],["bool"]]],[11,"eq","coreutils_core::os::utmpx","",15,[[["error"],["self"]],["bool"]]],[11,"eq","","",16,[[["utmpxkind"],["self"]],["bool"]]],[11,"eq","","",17,[[["utmpx"],["self"]],["bool"]]],[11,"ne","","",17,[[["utmpx"],["self"]],["bool"]]],[11,"partial_cmp","coreutils_core::os::group","",7,[[["group"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",7,[[["group"],["self"]],["bool"]]],[11,"le","","",7,[[["group"],["self"]],["bool"]]],[11,"gt","","",7,[[["group"],["self"]],["bool"]]],[11,"ge","","",7,[[["group"],["self"]],["bool"]]],[11,"partial_cmp","coreutils_core::os::passwd","",10,[[["self"],["passwd"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",10,[[["self"],["passwd"]],["bool"]]],[11,"le","","",10,[[["self"],["passwd"]],["bool"]]],[11,"gt","","",10,[[["self"],["passwd"]],["bool"]]],[11,"ge","","",10,[[["self"],["passwd"]],["bool"]]],[11,"partial_cmp","coreutils_core::os::tty","",11,[[["error"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",11,[[["error"],["self"]],["bool"]]],[11,"le","","",11,[[["error"],["self"]],["bool"]]],[11,"gt","","",11,[[["error"],["self"]],["bool"]]],[11,"ge","","",11,[[["error"],["self"]],["bool"]]],[11,"partial_cmp","","",13,[[["self"],["ttyname"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",13,[[["self"],["ttyname"]],["bool"]]],[11,"le","","",13,[[["self"],["ttyname"]],["bool"]]],[11,"gt","","",13,[[["self"],["ttyname"]],["bool"]]],[11,"ge","","",13,[[["self"],["ttyname"]],["bool"]]],[11,"partial_cmp","coreutils_core::os::utsname","",14,[[["self"],["utsname"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",14,[[["self"],["utsname"]],["bool"]]],[11,"le","","",14,[[["self"],["utsname"]],["bool"]]],[11,"gt","","",14,[[["self"],["utsname"]],["bool"]]],[11,"ge","","",14,[[["self"],["utsname"]],["bool"]]],[11,"partial_cmp","coreutils_core::os::utmpx","",15,[[["error"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",16,[[["utmpxkind"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","coreutils_core::backup","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::env","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::input","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::mktemp","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::group","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",8,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::passwd","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::tty","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::utsname","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::utmpx","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::env","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::mktemp","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::group","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::passwd","",9,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::tty","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::utsname","",14,[[["formatter"],["self"]],["result"]]],[11,"fmt","coreutils_core::os::utmpx","",15,[[["formatter"],["self"]],["result"]]],[11,"hash","coreutils_core::os::group","",7,[[["self"],["__h"]]]],[11,"hash","coreutils_core::os::passwd","",10,[[["self"],["__h"]]]],[11,"hash","coreutils_core::os::tty","",11,[[["self"],["__h"]]]],[11,"hash","","",13,[[["self"],["__h"]]]],[11,"hash","coreutils_core::os::utsname","",14,[[["self"],["__h"]]]],[11,"hash","coreutils_core::os::utmpx","",15,[[["self"],["__h"]]]],[11,"hash","","",16,[[["self"],["__h"]]]],[11,"hash","","",17,[[["self"],["__h"]]]],[11,"try_from","coreutils_core::os::group","",7,[[["group"]],["stdresult"]]],[11,"try_from","coreutils_core::os::passwd","",10,[[["passwd"]],["stdresult"]]],[11,"try_from","coreutils_core::os::utsname","",14,[[["utsname"]],["result"]]],[11,"try_from","coreutils_core::os::utmpx","",16,[[["i8"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["i16"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["i32"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["i64"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["i128"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["u8"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["u16"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["u32"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["u64"]],[["error"],["result",["error"]]]]],[11,"try_from","","",16,[[["u128"]],[["error"],["result",["error"]]]]],[11,"source","coreutils_core::env","",3,[[["self"]],[["option",["stderror"]],["stderror"]]]],[11,"source","coreutils_core::os::group","",6,[[["self"]],[["option",["stderror"]],["stderror"]]]],[11,"source","coreutils_core::os::passwd","",9,[[["self"]],[["option",["stderror"]],["stderror"]]]],[11,"source","coreutils_core::os::tty","",11,[[["self"]],[["option",["stderror"]],["stderror"]]]],[11,"source","coreutils_core::os::utmpx","",15,[[["self"]],[["option",["stderror"]],["stderror"]]]]],"p":[[8,"ByteSlice"],[8,"ByteVec"],[4,"BackupMode"],[4,"Error"],[3,"Input"],[3,"Mktemp"],[4,"Error"],[3,"Group"],[3,"Groups"],[4,"Error"],[3,"Passwd"],[4,"Error"],[8,"IsTTY"],[3,"TTYName"],[3,"UtsName"],[4,"Error"],[4,"UtmpxKind"],[3,"Utmpx"],[3,"UtmpxSet"],[3,"BStr"],[3,"BString"]]};
searchIndex["csplit"] = {"doc":"","i":[[3,"Filer","csplit","Output files handler.",null,null],[12,"silent","","",0,null],[12,"prefix","","",0,null],[12,"digits","","",0,null],[12,"file_counter","","",0,null],[12,"created","","",0,null],[12,"writer","","",0,null],[12,"bytes","","",0,null],[12,"current","","",0,null],[12,"buffer","","",0,null],[3,"Pattern","","Pattern with a matcher and a repeat.",null,null],[12,"repeat","","Number of repetitions. Negative or zero repeat means…",1,null],[12,"count","","Count of number of matches.",1,null],[12,"matcher","","",1,null],[3,"NeverMatcher","","Never match a line.",null,null],[3,"LineMatcher","","Line matcher.",null,null],[12,"lineno","","",2,null],[3,"RegexMatcher","","Regexp matcher.",null,null],[12,"regex","","",3,null],[12,"skip","","",3,null],[12,"offset","","",3,null],[12,"line_match","","",3,null],[4,"Error","","",null,null],[13,"OutOfRange","","",4,null],[13,"CreateFailed","","",4,null],[13,"OpenFailed","","",4,null],[13,"ReadFailed","","",4,null],[13,"WriteFailed","","",4,null],[13,"InvalidNumber","","",4,null],[13,"InvalidPattern","","",4,null],[13,"MissingOperand","","",4,null],[5,"main","","",null,[[]]],[5,"csplit","","",null,[[["vec"],["argmatches"]],[["result",["error"]],["error"]]]],[5,"open_input","","",null,[[["str"]],[["error"],["bufreader",["box"]],["result",["bufreader","error"]]]]],[5,"build_patterns","","",null,[[["vec",["str"]],["str"]],[["error"],["vec",["pattern"]],["result",["vec","error"]]]]],[5,"create_file","","",null,[[["str"],["vec"]],[["error"],["result",["file","error"]],["file"]]]],[5,"parse_repeat","","",null,[[["str"]],[["error"],["result",["i32","error"]],["i32"]]]],[5,"parse_number","","Parse a string slice as a number, or return error.",null,[[["str"]],[["error"],["result",["i32","error"]],["i32"]]]],[6,"Result","","",null,null],[8,"Matcher","","Matcher trait used to match lines.",null,null],[10,"match_line","","Check if a line matches.",5,[[["str"],["self"],["usize"]]]],[10,"process_line","","Process an input line.",5,[[["str"],["usize"],["self"],["filer"]],[["result",["error"]],["error"]]]],[11,"new","","",0,[[["i32"],["str"],["vec"],["bool"]],[["result",["filer","error"]],["filer"],["error"]]]],[11,"rotate","","",0,[[["self"]],[["result",["error"]],["error"]]]],[11,"write_line","","",0,[[["str"],["self"]],[["result",["error"]],["error"]]]],[11,"flush","","",0,[[["self"]],[["result",["error"]],["error"]]]],[11,"new","","",1,[[["matcher"],["box",["matcher"]]],["pattern"]]],[11,"match_line","","Check if line matches.",1,[[["str"],["usize"],["self"],["filer"]]]],[11,"process_line","","Process a line of input.",1,[[["str"],["usize"],["self"],["filer"]],[["result",["error"]],["error"]]]],[11,"new","","",6,[[],["nevermatcher"]]],[11,"parse","","",2,[[["str"]],[["error"],["box",["matcher"]],["result",["box","error"]]]]],[11,"new","","",3,[[["str"],["i32"],["bool"]],[["error"],["regexmatcher"],["result",["regexmatcher","error"]]]]],[11,"parse","","",3,[[["str"],["char"]],[["error"],["box",["matcher"]],["result",["box","error"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"match_line","","",6,[[["str"],["self"],["usize"]]]],[11,"process_line","","",6,[[["str"],["usize"],["self"],["filer"]],[["result",["error"]],["error"]]]],[11,"match_line","","",2,[[["str"],["self"],["usize"]]]],[11,"process_line","","",2,[[["str"],["usize"],["self"],["filer"]],[["result",["error"]],["error"]]]],[11,"match_line","","",3,[[["str"],["self"],["usize"]]]],[11,"process_line","","",3,[[["str"],["usize"],["self"],["filer"]],[["result",["error"]],["error"]]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Filer"],[3,"Pattern"],[3,"LineMatcher"],[3,"RegexMatcher"],[4,"Error"],[8,"Matcher"],[3,"NeverMatcher"]]};
searchIndex["cut"] = {"doc":"","i":[[3,"Options","cut","",null,null],[12,"line_terminator","","",0,null],[12,"complement","","",0,null],[3,"Error","","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[3,"Range","","Range of the form [start, one-after-end).",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[3,"RangeSet","","A set of ranges.",null,null],[12,"points","","",3,null],[3,"Bytes","","",null,null],[12,"range_set","","",4,null],[3,"Chars","","",null,null],[12,"range_set","","",5,null],[3,"Fields","","",null,null],[12,"range_set","","",6,null],[12,"only_delimited","","",6,null],[12,"input_delimiter","","",6,null],[12,"output_delimiter","","",6,null],[5,"main","","",null,[[]]],[5,"make_cutter","","",null,[[["options"],["argmatches"]],[["box",["cutter"]],["result",["box","error"]],["error"]]]],[6,"Result","","",null,null],[8,"Cutter","","",null,null],[10,"process_line","","",7,[[["u8"],["self"],["vec",["u8"]]],[["error"],["result",["error"]]]]],[11,"process_file","","",7,[[["str"],["self"],["options"]],[["error"],["result",["error"]]]]],[11,"process_input","","",7,[[["options"],["self"],["read"]],[["error"],["result",["error"]]]]],[11,"from_string","","Parse a range into optional beginning and optional end.",2,[[["str"]],[["error"],["result",["error"]]]]],[11,"from_string","","",3,[[["str"]],[["error"],["result",["error"]]]]],[11,"from_vec","","",3,[[["range"],["vec",["range"]]],[["error"],["result",["error"]]]]],[11,"complement","","",3,[[["self"]]]],[11,"new","","",4,[[["argmatches"],["rangeset"]],[["error"],["result",["error"]]]]],[11,"new","","",5,[[["argmatches"],["rangeset"]],[["error"],["result",["error"]]]]],[11,"new","","",6,[[["argmatches"],["rangeset"]],[["error"],["result",["error"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_string","","",1,[[["self"]],["string"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"process_line","","",4,[[["u8"],["self"],["vec",["u8"]]],[["error"],["result",["error"]]]]],[11,"process_line","","",5,[[["u8"],["self"],["vec",["u8"]]],[["error"],["result",["error"]]]]],[11,"process_line","","",6,[[["u8"],["self"],["vec",["u8"]]],[["error"],["result",["error"]]]]],[11,"from","","",1,[[["parseinterror"]],["self"]]],[11,"from","","",1,[[["error"]],["self"]]],[11,"from","","",1,[[["fromutf8error"]],["self"]]],[11,"clone","","",2,[[["self"]],["range"]]],[11,"eq","","",1,[[["error"],["self"]],["bool"]]],[11,"ne","","",1,[[["error"],["self"]],["bool"]]],[11,"eq","","",2,[[["range"],["self"]],["bool"]]],[11,"ne","","",2,[[["range"],["self"]],["bool"]]],[11,"eq","","",3,[[["rangeset"],["self"]],["bool"]]],[11,"ne","","",3,[[["rangeset"],["self"]],["bool"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Options"],[3,"Error"],[3,"Range"],[3,"RangeSet"],[3,"Bytes"],[3,"Chars"],[3,"Fields"],[8,"Cutter"]]};
searchIndex["date"] = {"doc":"","i":[[5,"main","date","",null,[[]]],[5,"date","","prints the local datetime. If `is_utc` is true, the…",null,[[["argmatches"]],[["string"],["result",["string"]]]]],[5,"set_os_time","","Sets the os datetime to `datetime`",null,[[["local"],["datetime",["local"]]],[["string"],["result",["string"]]]]],[5,"read","","Reads datetime from `input`. Could be seconds or a filepath.",null,[[["str"]],[["result",["datetime","string"]],["datetime",["local"]],["string"]]]],[5,"read_date","","Parses datetime from `date_str` with format…",null,[[["str"]],[["result",["datetime","string"]],["datetime",["local"]],["string"]]]],[5,"parse_date","","Parsed datetime from `date_str` with `format`.",null,[[["str"]],[["result",["datetime","string"]],["datetime",["local"]],["string"]]]],[5,"parse_seconds","","Return the local `DateTime`",null,[[["str"]],[["error"],["result",["datetime","error"]],["datetime",["local"]]]]],[5,"parse_file","","Returns the modified date of `filename`. Returns…",null,[[["str"]],[["error"],["result",["datetime","error"]],["datetime",["local"]]]]],[5,"build_parse_format","","Builds the correct datetime format string to parse `date`.",null,[[["str"]],["string"]]],[5,"parse_datetime_from_str","","This function parses `datetime` of given `format`. If…",null,[[["str"]],[["result",["datetime","string"]],["datetime",["local"]],["string"]]]],[5,"convert_tm_to_datetime","","Converts `time::Tm` to `chrono::DateTime` depending on…",null,[[["str"],["tm"]],["naivedatetime"]]],[5,"format_rfc2822","","displays `datetime` in rfc2822 format",null,[[["datetime"],["bool"]]]],[5,"format_standard","","displays `datetime` standard format `\"%a %b %e %k:%M:%S %Z…",null,[[["datetime"],["bool"]]]],[5,"format","","displays `datetime` with given `output_format`",null,[[["datetime"],["str"],["bool"]]]]],"p":[]};
searchIndex["dirname"] = {"doc":"","i":[[5,"main","dirname","",null,[[]]],[5,"dirname","","Get the directory full name of a given `path`.",null,[[["str"]],["string"]]]],"p":[]};
searchIndex["du"] = {"doc":"","i":[[3,"DuFlagsAndOptions","du","",null,null],[12,"show_all","","",0,null],[12,"use_apparent_size","","",0,null],[12,"count_links","","",0,null],[12,"dereference","","",0,null],[12,"dereference_args","","",0,null],[12,"print_human_readable","","",0,null],[12,"use_si","","",0,null],[12,"use_inodes","","",0,null],[12,"use_ascii_null","","",0,null],[12,"one_file_system","","",0,null],[12,"seperate_dirs","","",0,null],[12,"grand_total","","",0,null],[12,"blocksize","","",0,null],[12,"exclude_pattern","","",0,null],[12,"max_depth","","",0,null],[12,"threshold","","",0,null],[12,"time","","",0,null],[12,"time_style","","",0,null],[4,"DisplayValue","","",null,null],[13,"INodes","","",1,null],[13,"DiskUsage","","",1,null],[5,"main","","",null,[[]]],[5,"parse_files","","",null,[[["argmatches"]],[["str"],["vec",["str"]]]]],[5,"parse_blocksize","","",null,[[["argmatches"]],["blocksize"]]],[5,"parse_exclude_pattern","","",null,[[["str"],["option",["str"]]],[["option",["pattern"]],["pattern"]]]],[5,"parse_depth","","",null,[[["argmatches"]],[["option",["usize"]],["usize"]]]],[5,"parse_threshold","","",null,[[["str"],["option",["str"]]],["option"]]],[5,"parse_time","","",null,[[["argmatches"]],[["timeoption"],["option",["timeoption"]]]]],[5,"parse_time_style","","",null,[[["str"],["option",["str"]]],["timestyleoption"]]],[5,"process_path","","",null,[[["str"],["u64"],["duflagsandoptions"]]]],[5,"process_value","","",null,[[["vec"],["bool"],["usize"],["metadata"],["duflagsandoptions"]],["displayvalue"]]],[5,"get_display_value","","",null,[[["metadata"],["duflagsandoptions"]],["displayvalue"]]],[5,"get_bytes","","",null,[[["metadata"],["bool"]],["u64"]]],[5,"get_inode","","",null,[[],["u64"]]],[5,"process_time","","",null,[[["usize"],["vec"],["metadata"],["timeoption"]],["dutime"]]],[5,"get_display_time","","",null,[[["metadata"],["timeoption"]],["dutime"]]],[5,"filter_and_print","","",null,[[["duflagsandoptions"],["str"],["bool"],["usize"],["display"],["dutime"],["option",["dutime"]],["displayvalue"]]]],[5,"satisfies_threshold","","",null,[[["displayvalue"],["option"]],["bool"]]],[5,"print_du","","",null,[[["string"],["duflagsandoptions"],["displayvalue"]]]],[5,"print_du_with_time","","",null,[[["duflagsandoptions"],["string"],["dutime"],["displayvalue"]]]],[5,"format_display_value","","",null,[[["duflagsandoptions"],["displayvalue"]],["string"]]],[5,"format_display_time","","",null,[[["dutime"],["duflagsandoptions"]],["string"]]],[0,"blocksize","","",null,null],[3,"Blocksize","du::blocksize","",null,null],[12,"value","","",2,null],[12,"suffix","","",2,null],[12,"use_si","","",2,null],[4,"BlocksizeError","","",null,null],[13,"InvalidBlocksize","","",3,null],[13,"InvalidSuffixError","","",3,null],[4,"BlocksizeSuffix","","",null,null],[13,"KB","","",4,null],[13,"K","","",4,null],[13,"KiB","","",4,null],[13,"MB","","",4,null],[13,"M","","",4,null],[13,"MiB","","",4,null],[13,"GB","","",4,null],[13,"G","","",4,null],[13,"GiB","","",4,null],[13,"TB","","",4,null],[13,"T","","",4,null],[13,"TiB","","",4,null],[13,"PB","","",4,null],[13,"P","","",4,null],[13,"PiB","","",4,null],[13,"EB","","",4,null],[13,"E","","",4,null],[13,"EiB","","",4,null],[5,"init_blocksize","","",null,[[],["u64"]]],[11,"iter","","",4,[[],[["iter",["blocksizesuffix"]],["blocksizesuffix"]]]],[11,"value","","",4,[[],["u64"]]],[11,"to_str","","",4,[[],["str"]]],[11,"largest_from_value","","",4,[[["u64"],["bool"]],[["option",["blocksizesuffix"]],["blocksizesuffix"]]]],[11,"new","","",2,[[],["self"]]],[11,"from_str","","",2,[[["str"]],[["blocksizeerror"],["result",["blocksizeerror"]]]]],[11,"with_value","","",2,[[["u64"]],["self"]]],[11,"with_suffix","","",2,[[["str"]],[["blocksizeerror"],["result",["blocksizeerror"]]]]],[11,"use_si","","",2,[[["self"]]]],[11,"use_largest_suffix","","",2,[[],["self"]]],[11,"value","","",2,[[["self"]],["u64"]]],[11,"human_readable","","",2,[[["self"]],["string"]]],[11,"suffix_str","","",2,[[["self"]],["str"]]],[0,"time","du","",null,null],[3,"DuTime","du::time","",null,null],[12,"seconds","","",5,null],[12,"n_seconds","","",5,null],[4,"TimeStyleOption","","",null,null],[13,"LongIso","","",6,null],[13,"FullIso","","",6,null],[13,"Iso","","",6,null],[13,"Format","","",6,null],[4,"TimeOption","","",null,null],[13,"MTime","","",7,null],[13,"CTime","","",7,null],[13,"ATime","","",7,null],[11,"get_format","","",6,[[["self"]],["str"]]],[11,"new","","",5,[[["i64"]],["dutime"]]],[11,"with_nano_seconds","","",5,[[["i64"]],["dutime"]]],[11,"get_formatted","","",5,[[["timestyleoption"],["self"]],["string"]]],[11,"size","du","",1,[[["self"]],["u64"]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","du::blocksize","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_string","","",2,[[["self"]],["string"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","du::time","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"clone","du::blocksize","",4,[[["self"]],["blocksizesuffix"]]],[11,"clone","du::time","",5,[[["self"]],["dutime"]]],[11,"cmp","","",5,[[["self"]],["ordering"]]],[11,"eq","","",6,[[["self"],["timestyleoption"]],["bool"]]],[11,"ne","","",6,[[["self"],["timestyleoption"]],["bool"]]],[11,"eq","","",5,[[["self"]],["bool"]]],[11,"partial_cmp","","",5,[[["self"]],[["ordering"],["option",["ordering"]]]]],[11,"fmt","du::blocksize","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","du::time","",6,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",7,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","du","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","du::blocksize","",2,[[["formatter"],["self"]],["result"]]]],"p":[[3,"DuFlagsAndOptions"],[4,"DisplayValue"],[3,"Blocksize"],[4,"BlocksizeError"],[4,"BlocksizeSuffix"],[3,"DuTime"],[4,"TimeStyleOption"],[4,"TimeOption"]]};
searchIndex["echo"] = {"doc":"","i":[[5,"main","echo","",null,[[]]],[5,"echo","","Print given `strings` to standard output. If `scape` true,…",null,[[["bool"]],["result"]]],[5,"parse_code","","Parse a `input` code from `base` code to a UTF-8 char. The…",null,[[["u32"],["peekable"]],[["char"],["option",["char"]]]]],[5,"print_escape","","Print the scape codes from `string`. `output` is where it…",null,[[["str"]],[["result",["bool"]],["bool"]]]]],"p":[]};
searchIndex["env"] = {"doc":"","i":[[5,"main","env","",null,[[]]],[5,"env","","",null,[[["hashmap",["string","string"]],["string"],["vec",["string"]],["bool"]],["result"]]]],"p":[]};
searchIndex["expand"] = {"doc":"","i":[[3,"Expand","expand","",null,null],[12,"initial","","",0,null],[12,"tabstops","","",0,null],[5,"main","","",null,[[]]],[0,"tab_stops","","",null,null],[3,"TabStops","expand::tab_stops","",null,null],[12,"offset","","",1,null],[12,"repetable","","",1,null],[12,"positions","","",1,null],[17,"ARG_PARSE_MSG","","",null,null],[11,"new","","",1,[[["str"],["option",["str"]]],[["result",["string"]],["string"]]]],[11,"from_matches","expand","",0,[[["argmatches"]],["self"]]],[11,"expand_line","","",0,[[["str"],["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","expand::tab_stops","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Expand"],[3,"TabStops"]]};
searchIndex["false"] = {"doc":"","i":[[5,"main","false","",null,[[]]]],"p":[]};
searchIndex["groups"] = {"doc":"","i":[[5,"main","groups","",null,[[]]]],"p":[]};
searchIndex["head"] = {"doc":"","i":[[4,"Flags","head","We truncate the input at either some number of lines or…",null,null],[13,"LinesCount","","",0,null],[13,"BytesCount","","",0,null],[4,"Input","","Input is either a list of one or more files, or STDIN",null,null],[13,"Files","","",1,null],[13,"Stdin","","",1,null],[5,"main","","",null,[[]]],[5,"head","","Return the head of our input, truncated at a number of…",null,[[["flags"],["input"]],[["error"],["result",["error"]]]]],[5,"read_stream","","Read from a stream, truncated at a number of lines or…",null,[[["w"],["flags"],["read"],["bufreader"]],[["error"],["result",["error"]]]]],[17,"DEFAULT_LINES_COUNT","","",null,null],[17,"NEW_LINE","","",null,null],[11,"from_matches","","Parse arguments into a Flags enum",0,[[["argmatches"]],["self"]]],[11,"from_matches","","Parse arguments into an Input enum.",1,[[["argmatches"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]]],"p":[[4,"Flags"],[4,"Input"]]};
searchIndex["id"] = {"doc":"","i":[[3,"IdFlags","id","",null,null],[12,"audit","","",0,null],[12,"by_name","","",0,null],[12,"file","","",0,null],[12,"group","","",0,null],[12,"groups","","",0,null],[12,"pretty","","",0,null],[12,"name","","",0,null],[12,"real","","",0,null],[12,"rtable","","",0,null],[12,"user","","",0,null],[12,"zero","","",0,null],[5,"main","","",null,[[]]],[5,"default_logic","","",null,[[["passwd"],["char"]]]],[5,"group_logic","","",null,[[["idflags"],["passwd"],["char"]]]],[5,"user_logic","","",null,[[["idflags"],["passwd"],["char"]]]],[5,"groups_logic","","",null,[[["idflags"],["passwd"],["char"]]]],[5,"pretty_logic","","",null,[[["passwd"],["char"]]]],[5,"audit_logic","","",null,[[]]],[5,"rtable_logic","","",null,[[]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"is_zero_valid","","Check if `--zero` doesn't occour with `--group` or…",0,[[["self"]],["bool"]]],[11,"is_name_valid","","Check if `--name` doesn't occour with `--group` or…",0,[[["self"]],["bool"]]],[11,"is_real_valid","","Check if `--real` doesn't occour with `--group` or `--user`",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["idflags"]]],[11,"default","","",0,[[],["idflags"]]],[11,"cmp","","",0,[[["self"],["idflags"]],["ordering"]]],[11,"eq","","",0,[[["self"],["idflags"]],["bool"]]],[11,"ne","","",0,[[["self"],["idflags"]],["bool"]]],[11,"partial_cmp","","",0,[[["self"],["idflags"]],[["option",["ordering"]],["ordering"]]]],[11,"lt","","",0,[[["self"],["idflags"]],["bool"]]],[11,"le","","",0,[[["self"],["idflags"]],["bool"]]],[11,"gt","","",0,[[["self"],["idflags"]],["bool"]]],[11,"ge","","",0,[[["self"],["idflags"]],["bool"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"hash","","",0,[[["self"],["__h"]]]]],"p":[[3,"IdFlags"]]};
searchIndex["link"] = {"doc":"","i":[[5,"main","link","",null,[[]]]],"p":[]};
searchIndex["logname"] = {"doc":"","i":[[5,"main","logname","",null,[[]]]],"p":[]};
searchIndex["mkdir"] = {"doc":"","i":[[5,"main","mkdir","",null,[[]]]],"p":[]};
searchIndex["mkfifo"] = {"doc":"","i":[[5,"main","mkfifo","",null,[[]]]],"p":[]};
searchIndex["mktemp"] = {"doc":"","i":[[5,"main","mktemp","",null,[[]]]],"p":[]};
searchIndex["mv"] = {"doc":"","i":[[3,"MvFlags","mv","",null,null],[12,"backup","","",0,null],[12,"overwrite","","",0,null],[12,"update","","",0,null],[12,"strip_trailing_slashes","","",0,null],[12,"verbose","","",0,null],[12,"suffix","","",0,null],[12,"target_directory","","",0,null],[12,"no_target_directory","","",0,null],[4,"OverwriteMode","","",null,null],[13,"Force","","",1,null],[13,"Interactive","","",1,null],[13,"NoClobber","","",1,null],[5,"main","","",null,[[]]],[5,"move_files","","",null,[[["pathbuf"],["pathbuf"],["vec",["pathbuf"]],["mvflags"]],["bool"]]],[5,"rename_file","","",null,[[["pathbuf"],["mvflags"]],["bool"]]],[5,"file_older","","",null,[[["pathbuf"]],["bool"]]],[11,"from_matches","","",1,[[["argmatches"]],["overwritemode"]]],[11,"from_matches","","",0,[[["argmatches"]],["mvflags"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",1,[[["self"]],["overwritemode"]]],[11,"clone","","",0,[[["self"]],["mvflags"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"MvFlags"],[4,"OverwriteMode"]]};
searchIndex["nice"] = {"doc":"","i":[[5,"main","nice","",null,[[]]],[17,"P_PROCESS","","",null,null]],"p":[]};
searchIndex["nl"] = {"doc":"","i":[[3,"NlArgs","nl","",null,null],[12,"body_numbering","","",0,null],[12,"section_delimiter","","",0,null],[12,"footer_numbering","","",0,null],[12,"header_numbering","","",0,null],[12,"line_increment","","",0,null],[12,"join_blank_lines","","",0,null],[12,"number_format","","",0,null],[12,"no_renumber","","",0,null],[12,"number_separator","","",0,null],[12,"starting_line_number","","",0,null],[12,"number_width","","",0,null],[3,"SectionDelimiters","","",null,null],[12,"body","","",1,null],[12,"header","","",1,null],[12,"footer","","",1,null],[3,"Nl","","",null,null],[12,"ind","","",2,null],[12,"section","","",2,null],[12,"num_of_prev_blank_lines","","",2,null],[12,"section_delimiters","","",2,null],[12,"args","","",2,null],[4,"Style","","",null,null],[13,"All","","",3,null],[13,"Nonempty","","",3,null],[13,"None","","",3,null],[13,"Regex","","",3,null],[4,"Format","","",null,null],[13,"Ln","","",4,null],[13,"Rn","","",4,null],[13,"Rz","","",4,null],[4,"Section","","",null,null],[13,"Body","","",5,null],[13,"Header","","",5,null],[13,"Footer","","",5,null],[5,"main","","",null,[[]]],[11,"from_value","","",3,[[["str"],["style"],["option",["str"]]],["self"]]],[11,"from_value","","",4,[[["str"],["option",["str"]]],["self"]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"new","","",1,[[["string"]],["sectiondelimiters"]]],[11,"new","","",2,[[["nlargs"]],["self"]]],[11,"convert","","",2,[[["self"],["vec",["string"]],["string"]]]],[11,"convert_line","","",2,[[["self"],["string"]],["string"]]],[11,"check_and_change_section","","",2,[[["str"],["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"eq","","",3,[[["self"],["style"]],["bool"]]],[11,"eq","","",4,[[["format"],["self"]],["bool"]]],[11,"eq","","",5,[[["self"],["section"]],["bool"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]]],"p":[[3,"NlArgs"],[3,"SectionDelimiters"],[3,"Nl"],[4,"Style"],[4,"Format"],[4,"Section"]]};
searchIndex["nohup"] = {"doc":"","i":[[5,"main","nohup","",null,[[]]],[5,"get_stdout","","",null,[[["openoptions"]],[["result",["file"]],["file"]]]]],"p":[]};
searchIndex["pwd"] = {"doc":"","i":[[5,"main","pwd","",null,[[]]]],"p":[]};
searchIndex["rm"] = {"doc":"","i":[[3,"RmFlags","rm","",null,null],[12,"force","","",0,null],[12,"interactive","","",0,null],[12,"interactive_batch","","",0,null],[12,"preserve_root","","",0,null],[12,"recursive","","",0,null],[12,"dirs","","",0,null],[12,"verbose","","",0,null],[5,"main","","",null,[[]]],[5,"ask","","",null,[[["str"],["filetype"],["rmflags"],["permissions"]],[["result",["bool"]],["bool"]]]],[5,"rm","","",null,[[["rmflags"]],["result"]]],[5,"rm_dir_all","","",null,[[["str"],["filetype"],["pathbuf"],["rmflags"],["permissions"]],["result"]]],[5,"rm_dir_all_recursive","","",null,[[["str"],["filetype"],["pathbuf"],["rmflags"],["permissions"]],["result"]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["rmflags"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"RmFlags"]]};
searchIndex["rmdir"] = {"doc":"","i":[[3,"RmDirFlags","rmdir","",null,null],[12,"verbose","","",0,null],[12,"parents","","",0,null],[12,"ignore","","",0,null],[3,"RmdirError","","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[5,"main","","",null,[[]]],[5,"rmdir","","",null,[[["pathbuf"],["rmdirflags"]],[["result",["rmdirerror"]],["rmdirerror"]]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["rmdirflags"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"RmDirFlags"],[3,"RmdirError"]]};
searchIndex["sleep"] = {"doc":"","i":[[5,"main","sleep","",null,[[]]]],"p":[]};
searchIndex["touch"] = {"doc":"","i":[[3,"TouchFlags","touch","",null,null],[12,"access_time","","",0,null],[12,"mod_time","","",0,null],[12,"no_create","","",0,null],[12,"no_deref","","",0,null],[12,"reference","","",0,null],[12,"ref_path","","",0,null],[12,"date","","",0,null],[12,"date_val","","",0,null],[5,"main","","",null,[[]]],[5,"new_filetimes","","Returns the correct `(atime, mtime)` acording to the…",null,[[["touchflags"]]]],[5,"update_time","","Update the times of the `path` acording with the `flags`.",null,[[["str"],["filetime"],["touchflags"],["metadata"]]]],[5,"update_access_time","","",null,[[["str"],["filetime"],["metadata"],["bool"]]]],[5,"update_modification_time","","",null,[[["str"],["filetime"],["metadata"],["bool"]]]],[5,"update_both_time","","",null,[[["str"],["filetime"],["bool"]]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["touchflags"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"TouchFlags"]]};
searchIndex["true"] = {"doc":"","i":[[5,"main","true","",null,[[]]]],"p":[]};
searchIndex["tty"] = {"doc":"","i":[[5,"main","tty","",null,[[]]]],"p":[]};
searchIndex["uname"] = {"doc":"","i":[[5,"main","uname","",null,[[]]]],"p":[]};
searchIndex["unexpand"] = {"doc":"","i":[[3,"Unexpand","unexpand","",null,null],[12,"all","","",0,null],[12,"tabs","","",0,null],[5,"main","","",null,[[]]],[0,"tab_stops","","",null,null],[3,"TabStops","unexpand::tab_stops","",null,null],[12,"offset","","",1,null],[12,"repetable","","",1,null],[12,"positions","","",1,null],[17,"ARG_PARSE_MSG","","",null,null],[11,"new","","",1,[[["str"],["option",["str"]]],[["result",["string"]],["string"]]]],[11,"is_tab_stop","","",1,[[["self"],["usize"]],["bool"]]],[11,"from_matches","unexpand","",0,[[["argmatches"]],["self"]]],[11,"unexpand_line","","",0,[[["str"],["self"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","unexpand::tab_stops","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]]],"p":[[3,"Unexpand"],[3,"TabStops"]]};
searchIndex["unlink"] = {"doc":"","i":[[5,"main","unlink","",null,[[]]]],"p":[]};
searchIndex["uptime"] = {"doc":"","i":[[5,"main","uptime","",null,[[]]],[5,"uptime","","",null,[[["datetime"]],[["time_t"],["result",["time_t"]]]]],[5,"fmt_time","","",null,[[],["string"]]],[5,"fmt_load","","",null,[[],["string"]]],[5,"fmt_number_users","","",null,[[["usize"]],["string"]]],[5,"fmt_uptime","","",null,[[["time_t"],["bool"]],["string"]]]],"p":[]};
searchIndex["users"] = {"doc":"","i":[[5,"main","users","",null,[[]]]],"p":[]};
searchIndex["wc"] = {"doc":"","i":[[3,"WcFlags","wc","",null,null],[12,"print_bytes","","",0,null],[12,"print_chars","","",0,null],[12,"print_lines","","",0,null],[12,"print_words","","",0,null],[12,"print_max_line_len","","",0,null],[12,"pretty","","",0,null],[3,"WcResult","","",null,null],[12,"lines","","",1,null],[12,"words","","",1,null],[12,"chars","","",1,null],[12,"bytes","","",1,null],[12,"max_line_len","","",1,null],[5,"main","","",null,[[]]],[5,"wc","","",null,[[["read"]],[["wcresult"],["error"],["result",["wcresult","error"]]]]],[5,"get_formatted_result","","",null,[[["str"],["wcflags"],["wcresult"]],["string"]]],[11,"new","","",0,[[],["self"]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"combine","","",1,[[["wcresult"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["wcflags"]]],[11,"clone","","",1,[[["self"]],["wcresult"]]],[11,"default","","",0,[[],["wcflags"]]],[11,"default","","",1,[[],["wcresult"]]]],"p":[[3,"WcFlags"],[3,"WcResult"]]};
searchIndex["who"] = {"doc":"","i":[[3,"WhoFlags","who","",null,null],[12,"boot","","",0,null],[12,"dead","","",0,null],[12,"heading","","",0,null],[12,"login","","",0,null],[12,"associated_stdin","","",0,null],[12,"process","","",0,null],[12,"count","","",0,null],[12,"run_level","","",0,null],[12,"short","","",0,null],[12,"time","","",0,null],[12,"message","","",0,null],[12,"idle","","",0,null],[5,"main","","",null,[[]]],[5,"print_header","","",null,[[["whoflags"]]]],[5,"filter_entries","","",null,[[["whoflags"],["utmpset"]],[["utmpx"],["vec",["utmpx"]]]]],[5,"print_info","","",null,[[["whoflags"]]]],[5,"def_status","","",null,[[["utmpx"]]]],[11,"from_matches","","",0,[[["argmatches"]],["self"]]],[11,"is_all_false","","",0,[[["self"]],["bool"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["whoflags"]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]]],"p":[[3,"WhoFlags"]]};
searchIndex["whoami"] = {"doc":"","i":[[5,"main","whoami","",null,[[]]]],"p":[]};
searchIndex["yes"] = {"doc":"","i":[[5,"main","yes","",null,[[]]]],"p":[]};
addSearchOptions(searchIndex);initSearch(searchIndex);